# Эта конфигурация используется для настройки веб-сервера,
# который обслуживает статические файлы и обрабатывает разные URL-адреса
server {
    # Отключает отображение версии веб-сервера в HTTP-заголовках ответов сервера
    server_tokens off;
    # Сервер прослушивает входящие запросы на порту 80 (порт по умолчанию для HTTP-трафика)
    listen 80;
    # Путь к файлу журнала доступа, куда будут записываться информация о запросах к серверу
    access_log /var/log/access_web.log;
    # Путь к файлу журнала ошибок, куда будут записываться информация об ошибках сервера
    error_log /var/log/error_web.log error;
    # Далее описываются правила маршрутизации запросов на сервере
    # Настройки для обработки запросов, начинающихся с /admin/.
    # Запросы будут перенаправляться на внутренний backend сервер по адресу http://backend:8000/admin/.
    # Заголовки также будут настроены, чтобы сохранить информацию о хосте и прокси-сервере
    location /admin/ {
        proxy_pass http://backend:8000/admin/;
        proxy_set_header        Host $host;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Forwarded-Server $host;
    }
    # Настройка обработки запросов к ресурсам в папке /media/.
    # Включен автоматический вывод списка файлов в случае, если запрос не указывает конкретный файл.
    # Файлы будут искаться в директории /var/html/.
    location /media/ {
       autoindex on;
       root /var/html/;
    }
    # Настройка обработки запросов к статическим файлам в папке /static/admin/
    location /static/admin/ {
       autoindex on;
       root /var/html/;
    }
    # Обработка запросов к статическим файлам, которые располагаются по пути "/static/rest_framework/".
    # Запросы к этому пути будут искать соответствующие файлы в директории "/var/html/".
    location /static/rest_framework/ {
       root /var/html/;
    }
    # Этот блок определяет конфигурацию для URL-адресов, начинающихся с /api/docs/
    location /api/docs/ {
    # Устанавливает обслуживание файлов из корневого каталога
        root /usr/share/nginx/html;
    # Эта директива пытается напрямую обслуживать запрошенный URI.
    # Если это не удастся, он попытается обслужить файл /redoc.html
        try_files $uri $uri/redoc.html;
    }
    # Проксирование запросов к API приложения
    # Запросы, начинающиеся с "/api/", будут перенаправляться на "http://backend:8000/api/"
    # Заголовки также будут настроены, чтобы сохранить информацию о хосте и прокси-сервере
    location /api/ {
        proxy_pass http://backend:8000/api/;
        # Host Отправляет оригинальное имя хоста, которое было указано клиентом
        proxy_set_header        Host $host;
        # Передает реальный IP-адрес клиента, который сделал запрос
        proxy_set_header        X-Real-IP $remote_addr;
        # Передает информацию о всех IP-адресах проксирующих серверов, через которые прошел запрос
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        # Передает информацию о протоколе, с которым клиент обратился к прокси (http или https)
        proxy_set_header        X-Forwarded-Proto $scheme;
    }
    # Этот блок определяет конфигурацию для местоположения по умолчанию (все остальные URL-адреса)
    location / {
        # Устанавливает корневой каталог для обслуживания файлов по умолчанию
        root /usr/share/nginx/html;
        # Указывает имена файлов по умолчанию для поиска при запросе каталога
        index  index.html index.htm;
        # Пытается обслуживать запрошенный URI напрямую и
        # возвращается к обслуживанию файла /index.html, если он не найден
        try_files $uri /index.html;
        # Устанавливают различные заголовки для запросов проксирования.
        # Они используются для передачи информации внутренним службам, если таковые имеются
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
    }
    # Настраивает обработку ошибок для конкретных кодов ошибок HTTP.
    error_page   500 502 503 504  /50x.html;
    # Указывает местоположение для обслуживания страницы 50x.html в случае определенных ошибок
    location = /50x.html {
    # Устанавливает корневой каталог для обслуживания страницы ошибки
        root   /var/html/frontend/;
    }
}
